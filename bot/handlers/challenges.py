from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from services.challenges import get_actual_challenges, get_challenge, get_or_create_user, update_user_phone, is_joined, join_challenge, get_user_by_telegram_id, create_user, get_challenge_events, create_report, get_challenge_points, get_user_report_days, get_event, get_user_event_reports, get_challenge_leaderboard
from utils.pagination import build_challenges_keyboard, build_events_keyboard, build_days_keyboard
from utils.phone import validate_phone
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

router = Router()

CHALLENGES_PER_PAGE = 8

logger = logging.getLogger(__name__)

class ReportPhotoFSM(StatesGroup):
    waiting_photos = State()

class EventReportPhotoFSM(StatesGroup):
    waiting_photos = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
async def safe_edit_message(call: CallbackQuery, text: str, reply_markup=None, parse_mode='HTML'):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        await call.message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception as e:
        logger.warning(f"Failed to edit message: {e}")
        await call.message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)

async def safe_answer_or_edit(message_or_call, text: str, reply_markup=None, parse_mode='HTML'):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if hasattr(message_or_call, 'message'):  # –≠—Ç–æ CallbackQuery
        await safe_edit_message(message_or_call, text, reply_markup, parse_mode)
    else:  # –≠—Ç–æ Message
        await message_or_call.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)

async def send_challenge_card(message_or_call, challenge: dict, user: dict, joined: bool = None):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    if joined is None:
        joined = await is_joined(user['id'], challenge['id'])
    
    challenge_id = challenge['id']
    buttons = []
    
    if not joined:
        text = f"üèÜ <b>{challenge['title']}</b>\n\nüìù {challenge['description']}\n\nüìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {challenge['start_date']} ‚Äî {challenge['end_date']}\n\nüí° <i>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–∫–∏!</i>"
        buttons.append([
            types.InlineKeyboardButton(text="‚úÖ –í—Å—Ç—É–ø–∏—Ç—å", callback_data=f"join:{challenge_id}")
        ])
        buttons.append([
            types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —á–µ–ª–ª–µ–Ω–¥–∂–µ–π", callback_data="to_challenges")
        ])
    else:
        points = await get_challenge_points(user['id'], challenge_id)
        text = f"üèÜ <b>{challenge['title']}</b>\n\nüìù {challenge['description']}\n\nüìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {challenge['start_date']} ‚Äî {challenge['end_date']}\n\n‚≠ê <b>–í–∞—à–∏ –æ—á–∫–∏:</b> {points} üèÖ"
        buttons.extend([
            [
                types.InlineKeyboardButton(text="üéØ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data=f"events:{challenge_id}:0"),
                types.InlineKeyboardButton(text="üìã –û—Ç—á—ë—Ç—ã", callback_data=f"reports:{challenge_id}:0")
            ],
            [types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats:{challenge_id}")],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —á–µ–ª–ª–µ–Ω–¥–∂–µ–π", callback_data="to_challenges")]
        ])
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await safe_answer_or_edit(message_or_call, text, kb, 'HTML')

@router.message(Command('start'))
async def start_handler(message: types.Message):
    user = await get_user_by_telegram_id(message.from_user.id)
    if user:
        text = f"üéâ <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.full_name}!</b>\n\nüöÄ –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º —á–µ–ª–ª–µ–Ω–¥–∂–∞–º?"
    else:
        await create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username
        )
        text = f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!</b>\n\n‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\nüéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–∫–∏!"
    
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üèÜ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="to_challenges")]
        ]
    )
    await message.answer(text, reply_markup=kb, parse_mode='HTML')

@router.callback_query(lambda c: c.data == "to_challenges")
async def to_challenges_callback(call: types.CallbackQuery):
    challenges = await get_actual_challenges()
    if not challenges:
        text = "ü§∑‚Äç‚ôÇÔ∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π</b>\n\nüìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="to_challenges")]
            ]
        )
        await safe_edit_message(call, text, kb)
        await call.answer()
        return
    
    kb = build_challenges_keyboard(challenges, page=0, per_page=CHALLENGES_PER_PAGE)
    text = "üèÜ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏</b>\n\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è —É—á–∞—Å—Ç–∏—è:"
    await safe_edit_message(call, text, kb)
    await call.answer()

@router.message(Command('challenges'))
async def challenges_handler(message: types.Message):
    challenges = await get_actual_challenges()
    if not challenges:
        text = "ü§∑‚Äç‚ôÇÔ∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π</b>\n\nüìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="to_challenges")]
            ]
        )
        await message.answer(text, reply_markup=kb, parse_mode='HTML')
        return
    
    kb = build_challenges_keyboard(challenges, page=0, per_page=CHALLENGES_PER_PAGE)
    text = "üèÜ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏</b>\n\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è —É—á–∞—Å—Ç–∏—è:"
    await message.answer(text, reply_markup=kb, parse_mode='HTML')

@router.callback_query(lambda c: c.data.startswith('ch_page:'))
async def page_callback(call: CallbackQuery):
    page = int(call.data.split(':')[1])
    challenges = await get_actual_challenges()
    kb = build_challenges_keyboard(challenges, page=page, per_page=CHALLENGES_PER_PAGE)
    text = "üèÜ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏</b>\n\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è —É—á–∞—Å—Ç–∏—è:"
    await safe_edit_message(call, text, kb)
    await call.answer()

@router.callback_query(lambda c: c.data.startswith('challenge:'))
async def challenge_detail_callback(call: CallbackQuery):
    challenge_id = int(call.data.split(':')[1])
    challenge = await get_challenge(challenge_id)
    user = await get_or_create_user(
        telegram_id=call.from_user.id,
        username=call.from_user.username
    )
    joined = await is_joined(user['id'], challenge_id)
    await send_challenge_card(call, challenge, user, joined)
    await call.answer()

@router.callback_query(lambda c: c.data.startswith('join:'))
async def join_challenge_callback(call: CallbackQuery, state):
    challenge_id = int(call.data.split(':')[1])
    challenge = await get_challenge(challenge_id)
    user = await get_or_create_user(
        telegram_id=call.from_user.id,
        username=call.from_user.username
    )
    
    if challenge.get('requires_phone') and not user.get('phone_number'):
        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        text = f"üì± <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\nüèÜ <b>–ß–µ–ª–ª–µ–Ω–¥–∂:</b> {challenge['title']}\n\nüí° –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —ç—Ç–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\nüëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:"
        await safe_edit_message(call, text)
        await call.message.answer("üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:", reply_markup=kb)
        await state.set_state("awaiting_phone")
        await state.update_data(user_id=user['id'], challenge_id=challenge_id)
        await call.answer()
        return
    
    try:
        await join_challenge(user['id'], challenge_id)
        success_text = f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É!\n\nüèÜ <b>¬´{challenge['title']}¬ª</b>\n\nüöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã!"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data=f"challenge:{challenge_id}")]
            ]
        )
        await safe_edit_message(call, success_text, kb)
        await call.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂!")
        
        # –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —á–µ–ª–ª–µ–Ω–¥–∂–∞
        import asyncio
        await asyncio.sleep(2)
        await send_challenge_card(call, challenge, user, joined=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É: {e}")
        error_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</b>\n\nüîß –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"join:{challenge_id}")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —á–µ–ª–ª–µ–Ω–¥–∂—É", callback_data=f"challenge:{challenge_id}")]
    ]
        )
        await safe_edit_message(call, error_text, kb)
    await call.answer()

@router.message(lambda m: m.contact is not None or (m.text and validate_phone(m.text)))
async def phone_handler(message: types.Message, state):
    data = await state.get_data()
    user_id = data.get('user_id')
    challenge_id = data.get('challenge_id')
    phone = message.contact.phone_number if message.contact else message.text
    
    if not validate_phone(phone):
        await message.answer("‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä</b>\n\nüì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º'.", parse_mode='HTML')
        return
    
    try:
        await update_user_phone(user_id, phone)
        await join_challenge(user_id, challenge_id)
        await message.answer("‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\nüì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\nüéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É!", reply_markup=types.ReplyKeyboardRemove(), parse_mode='HTML')
        
        challenges = await get_actual_challenges()
        challenge = next((c for c in challenges if c['id'] == challenge_id), None)
        if not challenge:
            await message.answer('‚ùå –ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω', parse_mode='HTML')
        return
        
        user = {"id": user_id}  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –æ—á–∫–∞–º–∏
        await send_challenge_card(message, challenge, user, joined=True)
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞</b>\n\nüîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=types.ReplyKeyboardRemove(), parse_mode='HTML')
        await state.clear()

@router.callback_query(lambda c: c.data.startswith('events:'))
async def events_catalog_callback(call: CallbackQuery):
    _, challenge_id, page = call.data.split(':')
    challenge_id = int(challenge_id)
    page = int(page)
    events = await get_challenge_events(challenge_id)
    
    if not events:
        text = "ü§∑‚Äç‚ôÇÔ∏è <b>–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</b>\n\nüìÖ –î–ª—è —ç—Ç–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É", callback_data=f"challenge:{challenge_id}")]
            ]
        )
        await safe_edit_message(call, text, kb)
        await call.answer()
        return
    
    kb = build_events_keyboard(events, page=page, per_page=8, challenge_id=challenge_id)
    text = f"üéØ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞</b>\n\nüìã –ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {len(events)}\n\nüëÜ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:"
    await safe_edit_message(call, text, kb)
    await call.answer()

@router.callback_query(lambda c: c.data.startswith('ev_page:'))
async def events_page_callback(call: CallbackQuery):
    _, challenge_id, page = call.data.split(':')
    challenge_id = int(challenge_id)
    page = int(page)
    events = await get_challenge_events(challenge_id)
    kb = build_events_keyboard(events, page=page, per_page=8, challenge_id=challenge_id)
    text = f"üéØ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞</b>\n\nüìã –ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {len(events)}\n\nüëÜ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:"
    await safe_edit_message(call, text, kb)
    await call.answer()

@router.callback_query(lambda c: c.data.startswith('reports:'))
async def reports_catalog_callback(call: CallbackQuery):
    _, challenge_id, page = call.data.split(':')
    challenge_id = int(challenge_id)
    page = int(page)
    challenge = await get_challenge(challenge_id)
    user = await get_or_create_user(
        telegram_id=call.from_user.id,
        username=call.from_user.username
    )
    report_days = await get_user_report_days(user['id'], challenge_id)
    kb = build_days_keyboard(challenge['start_date'], challenge['end_date'], page=page, per_page=8, challenge_id=challenge_id, report_days=report_days)
    
    completed_reports = len(report_days)
    text = f"üìã <b>–í–∞—à–∏ –æ—Ç—á—ë—Ç—ã</b>\n\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: <b>{completed_reports}</b>\n\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –æ—Ç—á—ë—Ç–∞:"
    await safe_edit_message(call, text, kb)
    await call.answer()

@router.callback_query(lambda c: c.data.startswith('day_page:'))
async def days_page_callback(call: CallbackQuery):
    _, challenge_id, page = call.data.split(':')
    challenge_id = int(challenge_id)
    page = int(page)
    challenge = await get_challenge(challenge_id)
    user = await get_or_create_user(
        telegram_id=call.from_user.id,
        username=call.from_user.username
    )
    report_days = await get_user_report_days(user['id'], challenge_id)
    kb = build_days_keyboard(challenge['start_date'], challenge['end_date'], page=page, per_page=8, challenge_id=challenge_id, report_days=report_days)
    
    completed_reports = len(report_days)
    text = f"üìã <b>–í–∞—à–∏ –æ—Ç—á—ë—Ç—ã</b>\n\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: <b>{completed_reports}</b>\n\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –æ—Ç—á—ë—Ç–∞:"
    await safe_edit_message(call, text, kb)
    await call.answer()

@router.callback_query(lambda c: c.data.startswith('report_day:'))
async def report_day_callback(call: CallbackQuery, state: FSMContext):
    _, challenge_id, day = call.data.split(':')
    challenge_id = int(challenge_id)
    challenge = await get_challenge(challenge_id)
    user = await get_or_create_user(
        telegram_id=call.from_user.id,
        username=call.from_user.username
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
    report_days = await get_user_report_days(user['id'], challenge_id)
    logger.info(f"User {user['id']} report days for challenge {challenge_id}: {report_days}")
    
    if day in report_days:
        text = f"‚úÖ <b>–û—Ç—á—ë—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>\n\nüìÖ –ó–∞ –¥–∞—Ç—É <b>{day}</b> –æ—Ç—á—ë—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å –¥–ª—è –æ—Ç—á—ë—Ç–∞."
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–∞–ª–µ–Ω–¥–∞—Ä—é –æ—Ç—á—ë—Ç–æ–≤", callback_data=f"reports:{challenge_id}:0")]
            ]
        )
        await safe_edit_message(call, text, kb)
        await call.answer()
        return
    
    required_photos = challenge.get('required_photos', 1)
    await state.set_state(ReportPhotoFSM.waiting_photos)
    await state.update_data(challenge_id=challenge_id, day=day, photos=[], required_photos=required_photos, call_message_id=call.message.message_id)
    
    text = f"üì∏ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞</b>\n\nüìÖ <b>–î–∞—Ç–∞:</b> {day}\nüìã <b>–ß–µ–ª–ª–µ–Ω–¥–∂:</b> {challenge['title']}\n\nüì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>{required_photos}</b> —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç—á—ë—Ç–∞."
    
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"reports:{challenge_id}:0")]
        ]
    )
    await safe_edit_message(call, text, kb)
    await call.answer()

@router.message(ReportPhotoFSM.waiting_photos)
async def handle_report_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get('photos', [])
    required_photos = data.get('required_photos', 1)
    challenge_id = data.get('challenge_id')
    day = data.get('day')
    call_message_id = data.get('call_message_id')
    
    if message.photo:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        if len(photos) >= required_photos:
            try:
                await message.delete()
            except:
                pass
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            warning_text = f"‚ö†Ô∏è <b>–õ–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</b>\n\nüì∑ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ ({required_photos}).\n\n‚úÖ –í–∞—à –æ—Ç—á—ë—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=call_message_id,
                    text=warning_text,
                    parse_mode='HTML'
                )
            except:
                pass
            return
            
        photos.append(message.photo[-1].file_id)
        await state.update_data(photos=photos)
    
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass
    
    remaining = required_photos - len(photos)
    if remaining > 0:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        try:
            progress_text = f"üì∏ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞</b>\n\nüìÖ <b>–î–∞—Ç–∞:</b> {day}\n\nüì∑ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: <b>{len(photos)}/{required_photos}</b>\n\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: <b>{remaining}</b> —Ñ–æ—Ç–æ"
            kb = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"reports:{challenge_id}:0")]
                ]
            )
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=call_message_id,
                text=progress_text,
                reply_markup=kb,
                parse_mode='HTML'
            )
        except:
            pass
        return
    
    # –í—Å–µ —Ñ–æ—Ç–æ —Å–æ–±—Ä–∞–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username
    )
    
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['id']} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç: challenge_id={challenge_id}, day={day}, photos={photos}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_text = f"‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á—ë—Ç–∞...</b>\n\nüìÖ <b>–î–∞—Ç–∞:</b> {day}\nüì∑ <b>–§–æ—Ç–æ:</b> {len(photos)}\n\nüîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à –æ—Ç—á—ë—Ç..."
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=call_message_id,
                text=processing_text,
                parse_mode='HTML'
            )
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        report = await create_report(
            user_id=user['id'],
            text_content=f"–û—Ç—á–µ—Ç –∑–∞ {day}",
            challenge_id=challenge_id,
            report_date=day,
            photos=photos,
            bot=message.bot
        )
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞: {report}")
        if report and report.get('id'):
            # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—á–∫–æ–≤
            points = await get_challenge_points(user['id'], challenge_id)
            success_text = f"‚úÖ <b>–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\nüìÖ <b>–î–∞—Ç–∞:</b> {day}\nüì∑ <b>–§–æ—Ç–æ:</b> {len(photos)}\n‚≠ê <b>–í–∞—à–∏ –æ—á–∫–∏:</b> {points} üèÖ"
            kb = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="üìã –ö –æ—Ç—á—ë—Ç–∞–º", callback_data=f"reports:{challenge_id}:0")],
                    [types.InlineKeyboardButton(text="üèÜ –ö —á–µ–ª–ª–µ–Ω–¥–∂—É", callback_data=f"challenge:{challenge_id}")]
                ]
            )
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=call_message_id,
                    text=success_text,
                    reply_markup=kb,
                    parse_mode='HTML'
                )
            except:
                await message.answer(success_text, reply_markup=kb, parse_mode='HTML')
        else:
            logger.error(f"–ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {report}")
            error_text = "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\nüîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            kb = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="üìã –ö –æ—Ç—á—ë—Ç–∞–º", callback_data=f"reports:{challenge_id}:0")]
                ]
            )
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=call_message_id,
                    text=error_text,
                    reply_markup=kb,
                    parse_mode='HTML'
                )
            except:
                await message.answer(error_text, reply_markup=kb, parse_mode='HTML')
    except Exception as e:
        import traceback
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}\n{traceback.format_exc()}")
        
        error_msg = str(e)
        if "Report already exists" in error_msg or "—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" in error_msg:
            error_text = "‚ö†Ô∏è <b>–û—Ç—á—ë—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\nüìÖ –û—Ç—á—ë—Ç –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
        else:
            error_text = "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\nüîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üìã –ö –æ—Ç—á—ë—Ç–∞–º", callback_data=f"reports:{challenge_id}:0")]
            ]
        )
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=call_message_id,
                text=error_text,
                reply_markup=kb,
                parse_mode='HTML'
            )
        except:
            await message.answer(error_text, reply_markup=kb, parse_mode='HTML')
    
    await state.clear()

@router.callback_query(lambda c: c.data.startswith('event_detail:'))
async def event_detail_callback(call: CallbackQuery):
    event_id = int(call.data.split(':')[1])
    event = await get_event(event_id)
    if not event:
        text = "‚ùå <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\nüîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ."
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"events:{event.get('challenge_id', 0)}:0")]
            ]
        )
        await safe_edit_message(call, text, kb)
        await call.answer()
        return
    
    user = await get_or_create_user(
        telegram_id=call.from_user.id,
        username=call.from_user.username
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ
    joined = await is_joined(user['id'], event['challenge_id'])
    if not joined:
        text = "üö´ <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\nüí° –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ.\n\n‚úÖ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É!"
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üèÜ –ü–µ—Ä–µ–π—Ç–∏ –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É", callback_data=f"challenge:{event['challenge_id']}")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º", callback_data=f"events:{event['challenge_id']}:0")]
            ]
        )
        await safe_edit_message(call, text, kb)
        await call.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    event_reports = await get_user_event_reports(user['id'], event_id)
    has_report = len(event_reports) > 0
    
    text = f"üéØ <b>{event['title']}</b>\n\nüìù {event['description']}\n\nüìÖ <b>–î–∞—Ç–∞:</b> {event['date']}\n‚≠ê <b>–ë–∞–ª–ª–æ–≤ –∑–∞ –æ—Ç—á–µ—Ç:</b> {event['points_per_report']} üèÖ\nüì∏ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ:</b> {event['required_photos']}"
    
    buttons = []
    if has_report:
        text += "\n\n‚úÖ <b>–í–∞—à –æ—Ç—á–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>"
    else:
        buttons.append([types.InlineKeyboardButton(text="üìã –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"event_report:{event_id}")])
    
    buttons.append([types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º", callback_data=f"events:{event['challenge_id']}:0")])
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await safe_edit_message(call, text, kb)
    await call.answer()

@router.callback_query(lambda c: c.data.startswith('event_report:'))
async def event_report_callback(call: CallbackQuery, state: FSMContext):
    event_id = int(call.data.split(':')[1])
    event = await get_event(event_id)
    if not event:
        text = "‚ùå <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\nüîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ."
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º", callback_data=f"events:{event.get('challenge_id', 0)}:0")]
            ]
        )
        await safe_edit_message(call, text, kb)
        await call.answer()
        return
    
    user = await get_or_create_user(
        telegram_id=call.from_user.id,
        username=call.from_user.username
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
    event_reports = await get_user_event_reports(user['id'], event_id)
    logger.info(f"User {user['id']} has {len(event_reports)} reports for event {event_id} before starting FSM")
    
    if event_reports:
        text = f"‚úÖ <b>–û—Ç—á—ë—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>\n\nüéØ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event['title']}\n\nüìÖ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º", callback_data=f"events:{event['challenge_id']}:0")]
            ]
        )
        await safe_edit_message(call, text, kb)
        await call.answer()
        return
    
    required_photos = event.get('required_photos', 1)
    await state.set_state(EventReportPhotoFSM.waiting_photos)
    await state.update_data(event_id=event_id, photos=[], required_photos=required_photos, call_message_id=call.message.message_id)
    
    text = f"üì∏ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é</b>\n\nüéØ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event['title']}\nüìÖ <b>–î–∞—Ç–∞:</b> {event['date']}\n‚≠ê <b>–ë–∞–ª–ª—ã:</b> {event['points_per_report']} üèÖ\n\nüì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>{required_photos}</b> —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç—á—ë—Ç–∞."
    
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"events:{event['challenge_id']}:0")]
        ]
    )
    await safe_edit_message(call, text, kb)
    await call.answer()

@router.message(EventReportPhotoFSM.waiting_photos)
async def handle_event_report_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get('photos', [])
    required_photos = data.get('required_photos', 1)
    event_id = data.get('event_id')
    call_message_id = data.get('call_message_id')
    
    if message.photo:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        if len(photos) >= required_photos:
            try:
                await message.delete()
            except:
                pass
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            event = await get_event(event_id)
            warning_text = f"‚ö†Ô∏è <b>–õ–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</b>\n\nüì∑ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ ({required_photos}) –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '{event['title'] if event else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ'}'.\n\n‚úÖ –í–∞—à –æ—Ç—á—ë—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=call_message_id,
                    text=warning_text,
                    parse_mode='HTML'
                )
            except:
                pass
            return
            
        photos.append(message.photo[-1].file_id)
        await state.update_data(photos=photos)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass
    
    remaining = required_photos - len(photos)
    if remaining > 0:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        try:
            event = await get_event(event_id)
            progress_text = f"üì∏ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é</b>\n\nüéØ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event['title']}\n\nüì∑ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: <b>{len(photos)}/{required_photos}</b>\n\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: <b>{remaining}</b> —Ñ–æ—Ç–æ"
            kb = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"events:{event['challenge_id']}:0")]
                ]
            )
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=call_message_id,
                text=progress_text,
                reply_markup=kb,
                parse_mode='HTML'
            )
        except:
            pass
        return
    
    # –í—Å–µ —Ñ–æ—Ç–æ —Å–æ–±—Ä–∞–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username
    )
    
    event = await get_event(event_id)
    if not event:
        error_text = "‚ùå <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\nüîç –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        await message.answer(error_text, parse_mode='HTML')
        await state.clear()
        return
    
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['id']} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: event_id={event_id}, photos={photos}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_text = f"‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á—ë—Ç–∞...</b>\n\nüéØ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event['title']}\nüì∑ <b>–§–æ—Ç–æ:</b> {len(photos)}\n\nüîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à –æ—Ç—á—ë—Ç..."
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=call_message_id,
                text=processing_text,
                parse_mode='HTML'
            )
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        report = await create_report(
            user_id=user['id'],
            text_content=f"–û—Ç—á–µ—Ç –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é '{event['title']}'",
            challenge_id=event['challenge_id'],  # –°–≤—è–∑—ã–≤–∞–µ–º —Å —á–µ–ª–ª–µ–Ω–¥–∂–µ–º –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
            event_id=event_id,
            report_date=event['date'],
            photos=photos,
            bot=message.bot
        )
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {report}")
        if report and report.get('id'):
            # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—á–∫–æ–≤ –∑–∞ —á–µ–ª–ª–µ–Ω–¥–∂
            points = await get_challenge_points(user['id'], event['challenge_id'])
            success_text = f"‚úÖ <b>–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\nüéØ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event['title']}\nüì∑ <b>–§–æ—Ç–æ:</b> {len(photos)}\n‚≠ê <b>–í–∞—à–∏ –æ—á–∫–∏ –∑–∞ —á–µ–ª–ª–µ–Ω–¥–∂:</b> {points} üèÖ"
            kb = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="üéØ –ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º", callback_data=f"events:{event['challenge_id']}:0")],
                    [types.InlineKeyboardButton(text="üèÜ –ö —á–µ–ª–ª–µ–Ω–¥–∂—É", callback_data=f"challenge:{event['challenge_id']}")]
                ]
            )
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=call_message_id,
                    text=success_text,
                    reply_markup=kb,
                    parse_mode='HTML'
                )
            except:
                await message.answer(success_text, reply_markup=kb, parse_mode='HTML')
        else:
            logger.error(f"–ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {report}")
            error_text = "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\nüîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            kb = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="üéØ –ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º", callback_data=f"events:{event['challenge_id']}:0")]
                ]
            )
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=call_message_id,
                    text=error_text,
                    reply_markup=kb,
                    parse_mode='HTML'
                )
            except:
                await message.answer(error_text, reply_markup=kb, parse_mode='HTML')
    except Exception as e:
        import traceback
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}\n{traceback.format_exc()}")
        
        error_msg = str(e)
        if "Report already exists" in error_msg or "—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" in error_msg:
            error_text = "‚ö†Ô∏è <b>–û—Ç—á—ë—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\nüìÖ –û—Ç—á—ë—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
        else:
            error_text = "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\nüîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üéØ –ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º", callback_data=f"events:{event['challenge_id']}:0")]
            ]
        )
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=call_message_id,
                text=error_text,
                reply_markup=kb,
                parse_mode='HTML'
            )
        except:
            await message.answer(error_text, reply_markup=kb, parse_mode='HTML')
    
    await state.clear() 

@router.callback_query(lambda c: c.data.startswith('stats:'))
async def stats_callback(call: CallbackQuery):
    challenge_id = int(call.data.split(':')[1])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        challenge = await get_challenge(challenge_id)
        user = await get_or_create_user(
            telegram_id=call.from_user.id,
            username=call.from_user.username
        )
        
        if not challenge:
            text = "‚ùå <b>–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\nüîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω."
            kb = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —á–µ–ª–ª–µ–Ω–¥–∂–µ–π", callback_data="to_challenges")]
                ]
            )
            await safe_edit_message(call, text, kb)
            await call.answer()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ
        joined = await is_joined(user['id'], challenge_id)
        if not joined:
            text = "üö´ <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\nüí° –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ.\n\n‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"
            kb = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="üèÜ –ü–µ—Ä–µ–π—Ç–∏ –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É", callback_data=f"challenge:{challenge_id}")],
                    [types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —á–µ–ª–ª–µ–Ω–¥–∂–µ–π", callback_data="to_challenges")]
                ]
            )
            await safe_edit_message(call, text, kb)
            await call.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        leaderboard = await get_challenge_leaderboard(challenge_id)
        
        if not leaderboard:
            text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞</b>\n<b>¬´{challenge['title']}¬ª</b>\n\nü§∑‚Äç‚ôÇÔ∏è –í —ç—Ç–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
            kb = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É", callback_data=f"challenge:{challenge_id}")]
                ]
            )
            await safe_edit_message(call, text, kb)
            await call.answer()
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_position = None
        user_points = None
        for i, participant in enumerate(leaderboard, 1):
            if participant['user_id'] == user['id']:
                user_position = i
                user_points = participant['points']
                break
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        text = f"üìä <b>–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\nüèÜ <b>¬´{challenge['title']}¬ª</b>\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if user_position:
            position_emoji = "ü•á" if user_position == 1 else "ü•à" if user_position == 2 else "ü•â" if user_position == 3 else "üìç"
            text += f"{position_emoji} <b>–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {user_position} –º–µ—Å—Ç–æ ({user_points} –æ—á–∫–æ–≤)</b>\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        text += "üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n"
        for i, participant in enumerate(leaderboard[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            username = participant['username'] or "–ê–Ω–æ–Ω–∏–º"
            points = participant['points']
            
            # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if participant['user_id'] == user['id']:
                text += f"<b>{medal} {username} ‚Äî {points} –æ—á–∫–æ–≤</b>\n"
            else:
                text += f"{medal} {username} ‚Äî {points} –æ—á–∫–æ–≤\n"
        
        if len(leaderboard) > 10:
            text += f"\n... –∏ –µ—â—ë {len(leaderboard) - 10} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        
        text += f"\n\nüë• <b>–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {len(leaderboard)}"
        
        # –ö–Ω–æ–ø–∫–∏
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"stats:{challenge_id}")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É", callback_data=f"challenge:{challenge_id}")]
            ]
        )
        
        await safe_edit_message(call, text, kb)
        await call.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        text = "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</b>\n\nüîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É", callback_data=f"challenge:{challenge_id}")]
            ]
        )
        await safe_edit_message(call, text, kb)
        await call.answer() 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –ª—é–±—ã—Ö FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.callback_query(lambda c: c.data.startswith(('reports:', 'events:')) and '/cancel' not in c.data)
async def cancel_fsm_handler(call: CallbackQuery, state: FSMContext):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        logger.info(f"Auto-cleared FSM state during navigation: {current_state}") 